package com.company;

import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Scanner;

public class HuffmanCoding {

    static class HuffmanNode {
        int data;
        char c;

        HuffmanNode left;
        HuffmanNode right;
    }

    //comparing on the basis of data values of the nodes.
    static class MyComparator implements Comparator<HuffmanNode> {
        public int compare(HuffmanNode x, HuffmanNode y) {
            return x.data - y.data;
        }
    }

    public static class Huffman {
        //recursive function to print the huffman-code
        //through the tree traversal
        //here s is the huffman -code generated

        public static void printCode(HuffmanNode root, String s) {
            //base case: if the left and right are null
            //then its a leaf node and we print
            // the code s generated by traversing the tree.
            if (root.left == null && root.right == null && Character.isLetter(root.c)) {
                // c is the character in the table
                System.out.println(root.c + ":" + s);
                return;
            }

            //if we go to left then add "0" to the code.
            //if we go to the right add "1" to te right.

            //recursive calls for left and
            //right sub-tree of the generated tree.
            printCode(root.left, s + "0");
            printCode(root.right, s + "1");
        }

        //main function
        public static void main(String[] args) {
            Scanner s = new Scanner(System.in);
            //number of chars
            int n = 6;
            char[] charArray = {'a', 'b', 'c', 'd', 'e', 'f'};
            int[] charFreq = {5, 9, 12, 13, 16, 45};

            //creating a priority queue q.
            //makes a min- priority queue(min-heap).
            PriorityQueue<HuffmanNode> q = new PriorityQueue<HuffmanNode>(n, new MyComparator());

            for (int i = 0; i < n; i++) {
                //creating a huffman node object
                // and add it to the priority queue.
                HuffmanNode hn = new HuffmanNode();
                hn.c = charArray[i];
                hn.data = charFreq[i];

                hn.left = null;
                hn.right = null;

                //add function adds the huffman node to the queue
                q.add(hn);
            }
            //creating a root node
            HuffmanNode root = null;

            //Here we'll extract the two minimumvalue
            // from the heap each time until
            //its size reduces to 1, extract untill
            // all the nodes are extracted
            while (q.size() > 1) {

                //first min extract.
                HuffmanNode x = q.peek();
                q.poll();

                //second min exrac.
                HuffmanNode y = q.peek();
                q.poll();

                //new node f which is equal
                HuffmanNode f = new HuffmanNode();

                // to the sum of the frequency of the two nodes
                // assign values to the f node.
                f.data = x.data + y.data;
                f.c = '-';

                //first extracted node as left child.
                f.left = x;

                //second extracted node as the right child.
                f.right = y;

                //marking the f node as the root node.
                root = f;

                // add this node to the priority-queue
                q.add(f);
            }
            printCode(root, "");
        }
    }
}
